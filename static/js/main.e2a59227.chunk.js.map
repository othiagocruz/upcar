{"version":3,"sources":["carro.png","cenario.gif","theme.ts","App.tsx","hooks.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Theme","background","text","lanes","left","middle","right","Game","styled","div","cenario","Box","props","theme","opacity","Controls","Up","Left","Right","Message","p","Input","input","Button","button","Upcar","upcar","lane","App","useState","setLane","paused","setPaused","started","setStarted","starting","setStarting","finished","setFinished","usedTurbo","setUsedTurbo","countdown","setCountdown","racetime","setRacetime","laps","setLaps","savedLane","useRef","savedPaused","savedTurbos","savedTurboActive","useEffect","current","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","l","useKey","pressedKey","event","keyCode","setTimeout","type","onClick","data-testid","isMobile","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2a59227.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/carro.56be0a4e.png\";","module.exports = __webpack_public_path__ + \"static/media/cenario.d0d2cd17.gif\";","import { DefaultTheme } from \"styled-components\";\r\n\r\nconst Theme: DefaultTheme = {\r\n  background: \"darkslateblue\",\r\n  text: \"white\",\r\n  lanes: {\r\n    left: \"10%\",\r\n    middle: \"41.5%\",\r\n    right: \"65%\"\r\n  }\r\n};\r\n\r\nexport { Theme };\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport styled, { ThemeProvider } from \"styled-components\";\r\nimport useKey from \"use-key-hook\";\r\nimport upcar from \"./carro.png\";\r\nimport cenario from \"./cenario.gif\";\r\nimport { useInterval } from \"./hooks\";\r\nimport { Theme } from \"./theme\";\r\n\r\nexport interface IUpcar {\r\n  lane: string;\r\n}\r\n\r\nconst Game = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${cenario}) center no-repeat;\r\n  background-size: cover;\r\n  position: absolute;\r\n`;\r\n\r\nconst Box = styled.div<{ opacity?: string }>`\r\n  width: calc(100vw - 6rem);\r\n  height: calc(100vh - 6rem);\r\n  background: ${props => props.theme.background};\r\n  color: ${props => props.theme.text};\r\n  opacity: ${props => props.opacity || \"1\"};\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  align-content: center;\r\n  padding: 3rem;\r\n  position: absolute;\r\n`;\r\n\r\nconst Controls = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  flex-grow: 1;\r\n  position: absolute;\r\n`;\r\nconst Up = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst Left = styled.div`\r\n  width: 50%;\r\n  min-height: 40%;\r\n`;\r\n\r\nconst Right = styled.div`\r\n  width: 50%;\r\n  min-height: 40%;\r\n`;\r\n\r\nconst Message = styled.p`\r\n  font-size: 3.5rem;\r\n  display: block;\r\n  text-align: center;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  font-size: 1.4rem;\r\n  padding: 1.2rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: ${props => props.theme.text};\r\n  color: ${props => props.theme.background};\r\n  font-size: 1.6rem;\r\n  border: 0;\r\n  border-radius: 0.3rem;\r\n  padding: 1.2rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Upcar = styled.div<IUpcar>`\r\n  width: 25vw;\r\n  height: 25vh;\r\n  background: url(${upcar}) 0 0 no-repeat;\r\n  background-size: contain;\r\n  position: absolute;\r\n  bottom: 1rem;\r\n  left: ${props =>\r\n    (props.theme.lanes as { [key: string]: string })[props.lane]};\r\n`;\r\n\r\nfunction App() {\r\n  const [lane, setLane] = useState<string>(\"middle\");\r\n  const [paused, setPaused] = useState<boolean>(true);\r\n  const [started, setStarted] = useState<boolean>(false);\r\n  const [starting, setStarting] = useState<boolean>(false);\r\n  const [finished, setFinished] = useState<boolean>(false);\r\n  const [usedTurbo, setUsedTurbo] = useState<boolean>(false);\r\n  const [countdown, setCountdown] = useState<number>(3);\r\n  const [racetime, setRacetime] = useState<number>(1);\r\n  const [laps, setLaps] = useState<number>(0);\r\n\r\n  const savedLane = useRef(lane);\r\n  const savedPaused = useRef(paused);\r\n  const savedTurbos = useRef(3);\r\n  const savedTurboActive = useRef(false);\r\n\r\n  useEffect(() => {\r\n    savedLane.current = lane;\r\n  }, [lane]);\r\n\r\n  useEffect(() => {\r\n    savedPaused.current = paused;\r\n  }, [paused]);\r\n\r\n  savedTurboActive.current = usedTurbo;\r\n\r\n  useEffect(() => {\r\n    if (usedTurbo) {\r\n      savedTurbos.current = savedTurbos.current - 1;\r\n    }\r\n  }, [usedTurbo]);\r\n\r\n  useInterval(\r\n    () => {\r\n      starting && setCountdown(countdown - 1);\r\n      if (countdown < 1) {\r\n        setStarted(true);\r\n        setStarting(false);\r\n        setPaused(false);\r\n        setCountdown(3);\r\n      }\r\n      if (started && !paused) setRacetime(racetime + 1);\r\n    },\r\n    !usedTurbo ? 1200 : 200,\r\n    starting,\r\n    usedTurbo\r\n  );\r\n  useEffect(() => {\r\n    if (laps > 7) setFinished(true);\r\n  }, [laps]);\r\n\r\n  useEffect(() => {\r\n    if (!paused && !finished && racetime % 9 === 0) setLaps(l => l + 1);\r\n  }, [racetime, paused, finished]);\r\n\r\n  useKey((pressedKey: number, event: KeyboardEvent) => {\r\n    switch (event.keyCode) {\r\n      case 27:\r\n        setPaused(p => !p);\r\n        break;\r\n      case 32:\r\n        if (\r\n          savedTurbos.current < 1 ||\r\n          savedPaused.current ||\r\n          savedTurboActive.current\r\n        )\r\n          return;\r\n        setUsedTurbo(true);\r\n        setTimeout(() => setUsedTurbo(false), 3500);\r\n        break;\r\n      case 37:\r\n        if (savedLane.current === \"left\") return;\r\n        !savedPaused.current &&\r\n          setLane(savedLane.current === \"middle\" ? \"left\" : \"middle\");\r\n        break;\r\n      case 39:\r\n        if (savedLane.current === \"right\") return;\r\n        !savedPaused.current &&\r\n          setLane(savedLane.current === \"middle\" ? \"right\" : \"middle\");\r\n        break;\r\n      case 65:\r\n        !savedPaused.current && setLane(\"left\");\r\n        break;\r\n      case 68:\r\n        !savedPaused.current && setLane(\"right\");\r\n        break;\r\n      case 83:\r\n        !savedPaused.current && setLane(\"middle\");\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n  return (\r\n    <ThemeProvider theme={Theme}>\r\n      {!started && !starting && (\r\n        <Box>\r\n          <Message>Entre com seu nome para começar</Message>\r\n          <Input type=\"text\" />\r\n          <Button onClick={() => setStarting(true)}>Iniciar Corrida</Button>\r\n        </Box>\r\n      )}\r\n      {starting && !started && (\r\n        <Box>\r\n          <Message>\r\n            {countdown > 0 && countdown} {countdown === 0 && \"Valendo!!\"}\r\n          </Message>\r\n        </Box>\r\n      )}\r\n      {started && (\r\n        <Game data-testid=\"jogo\">\r\n          {isMobile && (\r\n            <Controls>\r\n              <Up\r\n                onClick={() => {\r\n                  if (\r\n                    savedTurbos.current < 1 ||\r\n                    savedPaused.current ||\r\n                    savedTurboActive.current\r\n                  )\r\n                    return;\r\n                  setUsedTurbo(true);\r\n                  setTimeout(() => setUsedTurbo(false), 3500);\r\n                }}\r\n              />\r\n              <Left\r\n                onClick={() => {\r\n                  if (savedLane.current === \"left\") return;\r\n                  !savedPaused.current &&\r\n                    setLane(savedLane.current === \"middle\" ? \"left\" : \"middle\");\r\n                }}\r\n              />\r\n              <Right\r\n                onClick={() => {\r\n                  if (savedLane.current === \"right\") return;\r\n                  !savedPaused.current &&\r\n                    setLane(\r\n                      savedLane.current === \"middle\" ? \"right\" : \"middle\"\r\n                    );\r\n                }}\r\n              />\r\n            </Controls>\r\n          )}\r\n          <Message>Voltas: {laps}/8</Message>\r\n          <Message>Turbos: {savedTurbos.current}/3</Message>\r\n          {usedTurbo && <Message>Turbo ativo!!</Message>}\r\n          <Upcar lane={lane} data-testid=\"carro\"></Upcar>\r\n        </Game>\r\n      )}\r\n      {paused && started && !finished && (\r\n        <Box>\r\n          <Message>Jogo pausado!</Message>\r\n        </Box>\r\n      )}\r\n      {finished && (\r\n        <Box opacity=\"0.7\">\r\n          <Message>Fim de jogo!</Message>\r\n        </Box>\r\n      )}\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport const useInterval = (\r\n  callback: () => void,\r\n  delay: number,\r\n  starting: boolean,\r\n  usedTurbo: boolean\r\n) => {\r\n  const savedCallback = useRef(callback);\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  });\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current && savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay, starting, usedTurbo]);\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}